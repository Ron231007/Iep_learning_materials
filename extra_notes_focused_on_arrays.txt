functions

void funtion_name(parameter_type parameter_name)
{
  functions;
  return;
}

ensure ur "void" and return value matches
ie. if it is int den u need to return (int) and so on

while loops: will exit the loop once the condition is no longer true ie. false. Do note that the conditio after the loop will be one iteration after the while loop suppose to exit
--> its needs meet the condition to know it has to break the while loop
   -->this may cause some unwanted problems, u may consider how it is written in the file while.cpp
while(conditions)
{
  code
}

do-while loop: execute the code at least once
do{
    code
}while(condition);

switch: neater way to write if else statements. can only be used if the variable u are checking is a char or int type
switch(variable)
{
  case 1: codes;
            break;
  case 2: codes;
              break;
  default:  code
}

if-else

if(conditions)
{
  code
}

else if(conditions)
{
  code;
}

else
{
  code
}

1d array
int arr[arr size] = {initilize};

arr can also be initilized by:

arr[0] =1;
arr[1] =2;

to loop through arr

for(int i =0;i<sizeof(arr)/sizeof(arr[0];i++)
{
  cout<<arr[i]<<" ";
}

2d arrays

int arr_2d[rows][colums] = {{1,2,3},{4,5,6},{7,8,9}};
int arr_2d[rows][columns] = {1,2,3,4,5,6,7,8,9} // alternate way to initilize 2d array

visual representation if rows = columns = 3:
1 2 3
4 5 6
7 8 9

to print the visual representation:

for(int row =0;row<rows;row++)
{
  for(int column =0;column<columns;;column++)
  {
     cout<<arr_2d[row][column]<<" ";
  }
  cout<<endl;
}


things to note on array(Imporant)
1) arrays info that are stored next to each other in memory(contiguous)
2) passing the array into a funtion without the array size causes memory leak since only the address of the first element(ie. arr[0]) is passed --> if wan to pass array into funtion u would need to pass the size of array also. alternatively, u can use vectors(not recommended unless vectors are well understood)
3) array sizes are fixed and cannot be changed after u initilize the array
4) array can only contain one type of data types(ie. int, double, bool, ect)
5)last element of array is arr[arr_size -1] since the first eleement starts at index 0
6) middle index of the array can be found using the formula: (l+r)/2 where r is the last index of the array and l is the first index of the array(useful in binary search)